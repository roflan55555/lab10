#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <time.h>
#include <queue>
#include <clocale>

#define MAX_NODES 400

// Функция для генерации случайной матрицы смежности
void generateRandomGraph(int graph[MAX_NODES][MAX_NODES], int n) {
    for (int i = 0; i < n; i++) {
        for (int j = i; j < n; j++) {
            if (i == j) {
                graph[i][j] = 0; // Нет петель
            }
            else {
                int random_value = rand() % 2; // Генерируем 0 или 1
                graph[i][j] = random_value;
                graph[j][i] = random_value; // Граф неориентированный
            }
        }
    }
}

int minDistance(int dist[], int sptSet[], int V) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (sptSet[v] == 0 && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}


void dijkstra(int graph[MAX_NODES][MAX_NODES], int src, int V, int* dist) {
    int* sptSet = (int*)malloc(V * sizeof(int)); // Массив для отслеживания посещенных вершин

    // Инициализация массива расстояний и массива посещенных вершин
    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = 0;
    }

    // Расстояние от начальной вершины до неё самой равно 0
    dist[src] = 0;

    // Поиск кратчайшего пути для всех вершин
    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet, V);

        // Помечаем выбранную вершину как посещенную
        sptSet[u] = 1;

        // Обновляем значения расстояний для соседей выбранной вершины
        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    free(sptSet);
}


// Функция для поиска расстояний в графе с использованием BFS
void bfs(int graph[MAX_NODES][MAX_NODES], int n, int startNode) {
    bool visited[MAX_NODES] = { false };
    int distances[MAX_NODES] = { 0 };
    std::queue<int> q;

    q.push(startNode);
    visited[startNode] = true;

    while (!q.empty()) {
        int currentNode = q.front();
        q.pop();

        for (int i = 0; i < n; i++) {
            if (graph[currentNode][i] && !visited[i]) {
                q.push(i);
                visited[i] = true;
                distances[i] = distances[currentNode] + 1;
            }
        }
    }

    // Выводим расстояния от startNode до всех остальных узлов
    for (int i = 0; i < n; i++) {
        printf("Расстояние от вершины %d до вершины %d: %d\n", startNode, i, distances[i]);
    }
}

// Функция для определения эксцентриситета вершины
int findEccentricity(int graph[MAX_NODES][MAX_NODES], int n, int vertex) {
    bool visited[MAX_NODES] = { false };
    int distances[MAX_NODES] = { 0 };
    std::queue<int> q;

    q.push(vertex);
    visited[vertex] = true;

    while (!q.empty()) {
        int currentNode = q.front();
        q.pop();

        for (int i = 0; i < n; i++) {
            if (graph[currentNode][i] && !visited[i]) {
                q.push(i);
                visited[i] = true;
                distances[i] = distances[currentNode] + 1;
            }
        }
    }

    // Находим максимальное расстояние (эксцентриситет)
    int eccentricity = 0;
    for (int i = 0; i < n; i++) {
        if (distances[i] > eccentricity) {
            eccentricity = distances[i];
        }
    }

    return eccentricity;
}

// Функция для определения радиуса графа
int findRadius(int graph[MAX_NODES][MAX_NODES], int n) {
    int minEccentricity = INT_MAX;

    for (int i = 0; i < n; i++) {
        int eccentricity = findEccentricity(graph, n, i);

        if (eccentricity < minEccentricity) {
            minEccentricity = eccentricity;
        }
    }

    return minEccentricity;
}

// Функция для определения диаметра графа
int findDiameter(int graph[MAX_NODES][MAX_NODES], int n) {
    int maxEccentricity = 0;

    for (int i = 0; i < n; i++) {
        int eccentricity = findEccentricity(graph, n, i);

        if (eccentricity > maxEccentricity) {
            maxEccentricity = eccentricity;
        }
    }

    return maxEccentricity;
}

// Функция для определения центральных вершин
void findCentralVertices(int graph[MAX_NODES][MAX_NODES], int n, int radius) {
    printf("Центральные вершины:\n");
    for (int i = 0; i < n; i++) {
        int eccentricity = findEccentricity(graph, n, i);

        if (eccentricity == radius) {
            printf("%d\n", i);
        }
    }
}

// Функция для определения периферийных вершин
void findPeripheralVertices(int graph[MAX_NODES][MAX_NODES], int n, int diameter) {
    printf("Периферийные вершины:\n");
    for (int i = 0; i < n; i++) {
        int eccentricity = findEccentricity(graph, n, i);

        if (eccentricity == diameter) {
            printf("%d\n", i);
        }
    }
}

int findRadius1(int graph[MAX_NODES][MAX_NODES], int V) {
    int minEccentricity = INT_MAX;

    for (int i = 0; i < V; i++) {
        int* dist = (int*)malloc(V * sizeof(int));
        dijkstra(graph, i, V, dist);

        int maxDistance = 0;

        for (int j = 0; j < V; j++) {
            if (dist[j] != INT_MAX && dist[j] > maxDistance) {
                maxDistance = dist[j];
            }
        }

        if (maxDistance < minEccentricity) {
            minEccentricity = maxDistance;
        }

        free(dist);
    }

    return minEccentricity;
}

// Функция для определения диаметра графа
int findDiameter1(int graph[MAX_NODES][MAX_NODES], int V) {
    int maxEccentricity = 0;

    for (int i = 0; i < V; i++) {
        int* dist = (int*)malloc(V * sizeof(int));
        dijkstra(graph, i, V, dist);

        int maxDistance = 0;

        for (int j = 0; j < V; j++) {
            if (dist[j] != INT_MAX && dist[j] > maxDistance) {
                maxDistance = dist[j];
            }
        }

        if (maxDistance > maxEccentricity) {
            maxEccentricity = maxDistance;
        }

        free(dist);
    }

    return maxEccentricity;
}

void findCentralVertices1(int graph[MAX_NODES][MAX_NODES], int V, int radius) {
    printf("Центральные вершины:\n");
    for (int i = 0; i < V; i++) {
        int* dist = (int*)malloc(V * sizeof(int));
        dijkstra(graph, i, V, dist);
        int maxDistance = 0;

        for (int j = 0; j < V; j++) {
            if (dist[j] != INT_MAX && dist[j] > maxDistance) {
                maxDistance = dist[j];
            }
        }

        if (maxDistance == radius) {
            printf("%d\n", i);
        }

        free(dist);
    }
}

// Функция для определения периферийных вершин
void findPeripheralVertices1(int graph[MAX_NODES][MAX_NODES], int V, int diameter) {
    printf("Периферийные вершины:\n");
    for (int i = 0; i < V; i++) {
        int* dist = (int*)malloc(V * sizeof(int));
        dijkstra(graph, i, V, dist);
        int maxDistance = 0;

        for (int j = 0; j < V; j++) {
            if (dist[j] != INT_MAX && dist[j] > maxDistance) {
                maxDistance = dist[j];
            }
        }

        if (maxDistance == diameter) {
            printf("%d\n", i);
        }

        free(dist);
    }
}



int main(int argc, char* argv[]) {
    setlocale(LC_ALL, "Russian");
    srand(time(NULL)); // Инициализируем генератор случайных чисел
    int startNode = 0;
    int radius;
    int diameter;
    int n; // Количество узлов в графе
    // printf("Введите количество ребер в графе: ");
     //scanf("%d", &n);
    char* c;
    int s;
    for (int i = 0; i < argc; i++)
    {
        if (i == 1)
        {
            n = strtol(argv[i], &c, 10);
        }
        if (i == 2)
        {
            startNode = strtol(argv[i], &c, 10);
        }
        if (i == 3)
        {
            s = strtol(argv[i], &c, 10);
        }

    }
    int* dist = (int*)malloc(n * sizeof(int));
    int graph[MAX_NODES][MAX_NODES] = { 0 };

    generateRandomGraph(graph, n);

    switch (s)
    {
    case(1):
    {
        printf("Матрица смежности графа:\n");
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                printf("%d ", graph[i][j]);
            }
            printf("\n");
        }
        bfs(graph, n, startNode);
        radius = findRadius(graph, n);
        diameter = findDiameter(graph, n);
        // Определение радиуса и диаметра
        
    }
    case(2):
    {
        printf("Матрица смежности графа:\n");
        for (int i = 0; i < n; i++) {
            for (int j = i; j < n; j++) {
                if (j == i)

                    graph[i][j] = 0;
                // Расстояние от вершины до самой себя
                else {
                    graph[i][j] = rand() % 10;
                    int rand1 = 0;
                    rand1 = rand() % 2;
                    if (rand1 == 0)
                    {
                        graph[j][i] = 0;
                    }
                    if (rand1 == 1)
                    {
                        graph[j][i] = graph[i][j];
                    }
                }


            }

        }
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                printf("%d ", graph[i][j]);
            }
            printf("\n");
        }
        dijkstra(graph, startNode, n, dist);
        radius = findRadius1(graph, n);
        diameter = findDiameter1(graph, n);
    }



    printf("Начальная вершина для поиска расстояний: %d\n", startNode);
    //scanf("%d", &startNode);

    

    printf("Радиус графа: %d\n", radius);
    printf("Диаметр графа: %d\n", diameter);

    // Определение центральных и периферийных вершин
    
    getchar();

    return 0;
    }
}
